"""
HTML output formatter for security scan reports.
"""

from pathlib import Path
from datetime import datetime
from typing import Dict, List
import json
import subprocess
import sys

from .formatters import BaseFormatter
from ..core.models import ScanSummary, ScanResult, Finding, SeverityLevel
from ..core.config import OutputConfig


class HtmlFormatter(BaseFormatter):
    """HTML output formatter."""
    
    @property
    def format_name(self) -> str:
        return "html"
    
    @property
    def file_extension(self) -> str:
        return "html"
    
    def generate_report(self, summary: ScanSummary, output_config: OutputConfig) -> str:
        """Generate HTML report with hierarchical structure."""
        
        # Create hierarchical output directory structure
        scan_dir = self._create_hierarchical_structure(output_config, summary)
        
        # Generate summary-level reports
        summary_dir = scan_dir / "summary"
        summary_dir.mkdir(exist_ok=True)
        
        if output_config.generate_executive_summary:
            summary_file = summary_dir / "executive_summary.html"
            summary_content = self._generate_executive_summary(summary)
            self._write_file(summary_file, summary_content)
        
        # Generate detailed report
        detailed_file = summary_dir / "detailed_report.html"
        detailed_content = self._generate_detailed_report(summary)
        self._write_file(detailed_file, detailed_content)
        
        # Generate target-specific reports
        self._generate_target_reports(summary, scan_dir)
        
        # Generate scan metadata
        self._generate_scan_metadata(summary, scan_dir)
        
        # Generate index files using the index generator
        self._generate_index_files(output_config.base_dir)
        
        return str(summary_file if output_config.generate_executive_summary else detailed_file)
    
    def _generate_executive_summary(self, summary: ScanSummary) -> str:
        """Generate executive summary HTML."""
        
        high_severity_findings = summary.get_high_severity_findings()
        
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Scan Executive Summary - {summary.scan_id}</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>ðŸ”’ Security Scan Executive Summary</h1>
            <div class="scan-info">
                <p><strong>Scan ID:</strong> {summary.scan_id}</p>
                <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p><strong>Duration:</strong> {summary.duration:.2f}s</p>
            </div>
        </header>

        <div class="summary-cards">
            <div class="card">
                <h3>Targets Scanned</h3>
                <div class="metric">{len(summary.targets)}</div>
            </div>
            <div class="card">
                <h3>Total Findings</h3>
                <div class="metric">{summary.total_findings}</div>
            </div>
            <div class="card critical">
                <h3>Critical</h3>
                <div class="metric">{summary.overall_finding_counts.get('CRITICAL', 0)}</div>
            </div>
            <div class="card high">
                <h3>High</h3>
                <div class="metric">{summary.overall_finding_counts.get('HIGH', 0)}</div>
            </div>
        </div>

        <div class="section">
            <h2>ðŸ“Š Findings by Severity</h2>
            <div class="severity-chart">
                {self._generate_severity_chart(summary.overall_finding_counts)}
            </div>
        </div>

        <div class="section">
            <h2>ðŸŽ¯ Targets Overview</h2>
            <div class="targets-grid">
                {self._generate_targets_overview(summary)}
            </div>
        </div>

        <div class="section">
            <h2>ðŸ”§ Scanner Results</h2>
            <div class="scanners-grid">
                {self._generate_scanners_overview(summary)}
            </div>
        </div>

        {self._generate_high_priority_section(high_severity_findings)}

        <div class="section">
            <h2>ðŸ“‹ Recommendations</h2>
            <div class="recommendations">
                {self._generate_recommendations(summary)}
            </div>
        </div>

        <footer class="footer">
            <p>Generated by Security Scanner v1.0.0</p>
            <p><a href="{summary.scan_id}_detailed.html">View Detailed Report</a></p>
        </footer>
    </div>
</body>
</html>"""
        
        return html
    
    def _generate_detailed_report(self, summary: ScanSummary) -> str:
        """Generate detailed HTML report."""
        
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Scan Detailed Report - {summary.scan_id}</title>
    <style>
        {self._get_css_styles()}
        .findings-table {{ width: 100%; border-collapse: collapse; margin-top: 20px; }}
        .findings-table th, .findings-table td {{ padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }}
        .findings-table th {{ background-color: #f8f9fa; font-weight: bold; }}
        .severity-critical {{ color: #dc3545; font-weight: bold; }}
        .severity-high {{ color: #fd7e14; font-weight: bold; }}
        .severity-medium {{ color: #ffc107; font-weight: bold; }}
        .severity-low {{ color: #28a745; }}
        .severity-info {{ color: #17a2b8; }}
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>ðŸ”’ Security Scan Detailed Report</h1>
            <div class="scan-info">
                <p><strong>Scan ID:</strong> {summary.scan_id}</p>
                <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
        </header>

        <div class="section">
            <h2>ðŸ“‹ All Findings</h2>
            {self._generate_findings_table(summary)}
        </div>

        <div class="section">
            <h2>ðŸ“Š Detailed Results by Scanner</h2>
            {self._generate_detailed_scanner_results(summary)}
        </div>

        <footer class="footer">
            <p>Generated by Security Scanner v1.0.0</p>
            <p><a href="executive_summary.html">Back to Executive Summary</a></p>
        </footer>
    </div>
</body>
</html>"""
        
        return html
    
    
    def _get_css_styles(self) -> str:
        """Get CSS styles for HTML reports."""
        return """
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background-color: #f8f9fa; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #007acc, #0056b3); color: white; padding: 30px; border-radius: 10px; margin-bottom: 30px; }
        .header h1 { margin: 0; font-size: 2.5em; }
        .scan-info { margin-top: 15px; opacity: 0.9; }
        .summary-cards { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .card { background: white; padding: 25px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); text-align: center; }
        .card h3 { margin: 0 0 15px 0; color: #333; }
        .card .metric { font-size: 2.5em; font-weight: bold; color: #007acc; }
        .card.critical .metric { color: #dc3545; }
        .card.high .metric { color: #fd7e14; }
        .section { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 30px; }
        .section h2 { margin: 0 0 20px 0; color: #333; border-bottom: 2px solid #007acc; padding-bottom: 10px; }
        .targets-grid, .scanners-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .target-card, .scanner-card { background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #007acc; }
        .severity-chart { display: flex; gap: 10px; flex-wrap: wrap; }
        .severity-bar { padding: 10px 15px; border-radius: 5px; color: white; font-weight: bold; }
        .severity-critical { background-color: #dc3545; }
        .severity-high { background-color: #fd7e14; }
        .severity-medium { background-color: #ffc107; color: #333; }
        .severity-low { background-color: #28a745; }
        .severity-info { background-color: #17a2b8; }
        .recommendations { background: #e7f3ff; padding: 20px; border-radius: 8px; border-left: 4px solid #007acc; }
        .recommendations ul { margin: 0; padding-left: 20px; }
        .recommendations li { margin-bottom: 10px; }
        .footer { text-align: center; padding: 20px; color: #666; }
        .footer a { color: #007acc; text-decoration: none; }
        .footer a:hover { text-decoration: underline; }
        .finding-item { background: #f8f9fa; padding: 15px; margin-bottom: 15px; border-radius: 8px; border-left: 4px solid #007acc; }
        .finding-title { font-weight: bold; margin-bottom: 5px; }
        .finding-meta { font-size: 0.9em; color: #666; margin-bottom: 10px; }
        .finding-description { margin-bottom: 10px; }
        .finding-remediation { background: #e7f3ff; padding: 10px; border-radius: 5px; font-size: 0.9em; }
        """
    
    def _generate_severity_chart(self, counts: Dict[str, int]) -> str:
        """Generate severity chart HTML."""
        chart_html = ""
        for severity, count in counts.items():
            if count > 0:
                chart_html += f'<div class="severity-bar severity-{severity.lower()}">{severity}: {count}</div>'
        return chart_html or '<p>No findings</p>'
    
    def _generate_targets_overview(self, summary: ScanSummary) -> str:
        """Generate targets overview HTML."""
        html = ""
        target_summary = summary.target_summary
        
        for target_path, target_info in target_summary.items():
            html += f"""
            <div class="target-card">
                <h4>{target_info['target_type'].title()}: {Path(target_path).name}</h4>
                <p><strong>Path:</strong> {target_path}</p>
                <p><strong>Scanners:</strong> {', '.join(target_info['scanners_run'])}</p>
                <p><strong>Findings:</strong> {target_info['total_findings']}</p>
            </div>
            """
        
        return html
    
    def _generate_scanners_overview(self, summary: ScanSummary) -> str:
        """Generate scanners overview HTML."""
        html = ""
        scanner_summary = summary.scanner_summary
        
        for scanner_name, scanner_info in scanner_summary.items():
            html += f"""
            <div class="scanner-card">
                <h4>{scanner_name.title()}</h4>
                <p><strong>Scans:</strong> {scanner_info['successful_scans']}/{scanner_info['total_scans']} successful</p>
                <p><strong>Findings:</strong> {scanner_info['total_findings']}</p>
                <p><a href="{scanner_name}_report.html">View Details</a></p>
            </div>
            """
        
        return html
    
    def _generate_high_priority_section(self, high_findings: List[Finding]) -> str:
        """Generate high priority findings section."""
        if not high_findings:
            return ""
        
        html = f"""
        <div class="section">
            <h2>ðŸš¨ High Priority Findings</h2>
            <p>The following {len(high_findings)} findings require immediate attention:</p>
            {self._generate_findings_list(high_findings[:10])}  <!-- Limit to top 10 -->
        </div>
        """
        
        return html
    
    def _generate_findings_list(self, findings: List[Finding]) -> str:
        """Generate findings list HTML."""
        if not findings:
            return "<p>No findings</p>"
        
        html = ""
        for finding in findings:
            severity_class = f"severity-{finding.severity.value.lower()}"
            html += f"""
            <div class="finding-item">
                <div class="finding-title">{finding.title}</div>
                <div class="finding-meta">
                    <span class="{severity_class}">{finding.severity.value}</span> | 
                    Scanner: {finding.scanner} | 
                    Location: {finding.location or 'N/A'}
                </div>
                <div class="finding-description">{finding.description}</div>
                {f'<div class="finding-remediation"><strong>Remediation:</strong> {finding.remediation}</div>' if finding.remediation else ''}
            </div>
            """
        
        return html
    
    def _generate_findings_table(self, summary: ScanSummary) -> str:
        """Generate findings table HTML."""
        if not any(result.findings for result in summary.results):
            return "<p>No findings</p>"
        
        html = """
        <table class="findings-table">
            <thead>
                <tr>
                    <th>Severity</th>
                    <th>Title</th>
                    <th>Scanner</th>
                    <th>Target</th>
                    <th>Location</th>
                </tr>
            </thead>
            <tbody>
        """
        
        for result in summary.results:
            for finding in result.findings:
                severity_class = f"severity-{finding.severity.value.lower()}"
                html += f"""
                <tr>
                    <td class="{severity_class}">{finding.severity.value}</td>
                    <td>{finding.title}</td>
                    <td>{finding.scanner}</td>
                    <td>{Path(finding.target).name}</td>
                    <td>{finding.location or 'N/A'}</td>
                </tr>
                """
        
        html += """
            </tbody>
        </table>
        """
        
        return html
    
    def _generate_detailed_scanner_results(self, summary: ScanSummary) -> str:
        """Generate detailed scanner results HTML."""
        html = ""
        scanner_summary = summary.scanner_summary
        
        for scanner_name, scanner_info in scanner_summary.items():
            html += f"""
            <div class="scanner-section">
                <h3>{scanner_name.title()}</h3>
                <p><strong>Total Scans:</strong> {scanner_info['total_scans']}</p>
                <p><strong>Successful:</strong> {scanner_info['successful_scans']}</p>
                <p><strong>Failed:</strong> {scanner_info['failed_scans']}</p>
                <p><strong>Total Findings:</strong> {scanner_info['total_findings']}</p>
                <p><a href="{scanner_name}_report.html">View Detailed Report</a></p>
            </div>
            """
        
        return html
    
    def _generate_recommendations(self, summary: ScanSummary) -> str:
        """Generate recommendations HTML."""
        recommendations = [
            "Review and address all critical and high severity findings immediately",
            "Implement automated security scanning in your CI/CD pipeline",
            "Regularly update dependencies and base images",
            "Use secrets management solutions instead of hardcoded credentials",
            "Follow security best practices for your infrastructure as code",
            "Consider implementing security policies with tools like OPA/Gatekeeper",
            "Schedule regular security scans and reviews"
        ]
        
        html = "<ul>"
        for rec in recommendations:
            html += f"<li>{rec}</li>"
        html += "</ul>"
        
        return html
    
    def _create_hierarchical_structure(self, output_config: OutputConfig, summary: ScanSummary) -> Path:
        """Create hierarchical directory structure for reports."""
        from datetime import datetime
        import json
        
        # Create main scan directory
        scan_dir = Path(output_config.base_dir) / summary.scan_id
        scan_dir.mkdir(parents=True, exist_ok=True)
        
        # Create organized subdirectories
        (scan_dir / "summary").mkdir(exist_ok=True)          # Executive and detailed reports
        (scan_dir / "targets").mkdir(exist_ok=True)          # Target-specific reports
        (scan_dir / "raw-data").mkdir(exist_ok=True)         # JSON outputs and SARIF files
        (scan_dir / "metadata").mkdir(exist_ok=True)         # Scan metadata
        
        return scan_dir
    
    def _generate_target_reports(self, summary: ScanSummary, scan_dir: Path) -> None:
        """Generate target-specific reports and combined findings."""
        targets_dir = scan_dir / "targets"
        
        # Group results by target
        target_results = {}
        for result in summary.results:
            target_name = self._get_safe_target_name(result.target.path)
            if target_name not in target_results:
                target_results[target_name] = []
            target_results[target_name].append(result)
        
        # Generate reports for each target
        for target_name, results in target_results.items():
            target_dir = targets_dir / target_name
            target_dir.mkdir(exist_ok=True)
            
            # Generate combined findings JSON
            combined_findings = []
            for result in results:
                for finding in result.findings:
                    combined_findings.append({
                        'scanner': result.scanner_name,
                        'severity': finding.severity.value,
                        'title': finding.title,
                        'description': finding.description,
                        'location': finding.location,
                        'remediation': finding.remediation
                    })
            
            # Write combined findings
            findings_file = target_dir / "combined_findings.json"
            with open(findings_file, 'w', encoding='utf-8') as f:
                json.dump(combined_findings, f, indent=2)
            
            # Generate scanner-specific reports
            scanners_dir = target_dir / "scanners"
            scanners_dir.mkdir(exist_ok=True)
            
            for result in results:
                scanner_file = scanners_dir / f"{result.scanner_name}.json"
                with open(scanner_file, 'w', encoding='utf-8') as f:
                    json.dump(result.to_dict(), f, indent=2)
    
    def _generate_scan_metadata(self, summary: ScanSummary, scan_dir: Path) -> None:
        """Generate scan metadata file."""
        from datetime import datetime
        import json
        
        # Calculate scanners used
        scanners_used = list(set(result.scanner_name for result in summary.results))
        scanners_used.sort()
        
        # Calculate targets count
        targets_count = len(set(result.target.path for result in summary.results))
        
        metadata = {
            'scan_id': summary.scan_id,
            'timestamp': summary.start_time.strftime('%Y-%m-%d %H:%M:%S'),
            'scan_type': self._infer_scan_type(summary),
            'description': self._generate_scan_description(summary),
            'targets_count': targets_count,
            'total_findings': summary.total_findings,
            'scanners_used': scanners_used,
            'created_by': 'security-scanner',
            'created_at': summary.start_time.isoformat(),
            'duration': summary.duration
        }
        
        metadata_file = scan_dir / "metadata" / "scan_metadata.json"
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2)
    
    def _generate_index_files(self, base_dir: str) -> None:
        """Generate index.html files using the index generator."""
        try:
            # Import and run the index generator
            import sys
            import subprocess
            from pathlib import Path
            
            # Get the path to the index generator script
            script_dir = Path(__file__).parent.parent
            index_generator_path = script_dir / "utils" / "index_generator.py"
            
            if index_generator_path.exists():
                # Run the index generator
                subprocess.run([
                    sys.executable, str(index_generator_path), base_dir
                ], check=True, capture_output=True, text=True)
                self.logger.info(f"Generated index files for reports in: {base_dir}")
            else:
                self.logger.warning(f"Index generator not found at: {index_generator_path}")
                
        except Exception as e:
            self.logger.error(f"Failed to generate index files: {e}")
    
    def _get_safe_target_name(self, target_path: str) -> str:
        """Convert target path to safe directory name."""
        if target_path.startswith('docker://') or target_path.startswith('registry://'):
            # Handle Docker images
            name = target_path.replace('docker://', '').replace('registry://', '')
            name = name.replace(':', '_').replace('/', '_')
        else:
            # Handle file paths and other targets
            name = Path(target_path).name or target_path.replace('/', '_').replace('\\', '_')
        
        # Make safe for filesystem
        safe_name = ''.join(c for c in name if c.isalnum() or c in ('_', '-', '.'))
        return safe_name or 'unknown_target'
    
    def _infer_scan_type(self, summary: ScanSummary) -> str:
        """Infer scan type from targets."""
        target_types = set(result.target.target_type.value for result in summary.results)
        
        if 'docker' in target_types:
            return 'container'
        elif 'git' in target_types:
            return 'source_code'
        elif 'kubernetes' in target_types:
            return 'kubernetes'
        elif 'terraform' in target_types:
            return 'infrastructure'
        else:
            return 'mixed'
    
    def _generate_scan_description(self, summary: ScanSummary) -> str:
        """Generate a description for the scan."""
        target_types = set(result.target.target_type.value for result in summary.results)
        targets_count = len(set(result.target.path for result in summary.results))
        scanners_count = len(set(result.scanner_name for result in summary.results))
        
        if 'docker' in target_types:
            return f"Container security scan for {targets_count} image{'s' if targets_count != 1 else ''}"
        elif 'git' in target_types:
            return f"Source code security scan for {targets_count} repositor{'ies' if targets_count != 1 else 'y'}"
        elif 'kubernetes' in target_types:
            return f"Kubernetes security scan for {targets_count} manifest{'s' if targets_count != 1 else ''}"
        elif 'terraform' in target_types:
            return f"Infrastructure security scan for {targets_count} Terraform file{'s' if targets_count != 1 else ''}"
        else:
            return f"Security scan for {targets_count} target{'s' if targets_count != 1 else ''} using {scanners_count} scanner{'s' if scanners_count != 1 else ''}"